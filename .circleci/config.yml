version: 2.1

orbs:
  slack: circleci/slack@4.4

executors:
  go:
    docker:
      - image: docker.mirror.hashicorp.services/cimg/go:${GO_VERSION}
    environment:
      CONSUL_VERSION: "1.10.3"
      GOMAXPROCS: 4
      GO111MODULE: "on"
      GOPROXY: https://proxy.golang.org/
      GO_VERSION: 1.16
      TERRAFORM_VERSION: "1.0.8"
      VAULT_VERSION: "1.8.3"
      GOTESTSUM_VERSION: "1.8.1"
      E2E_TESTS_PARALLELISM: "3"

jobs:
  refresh-cache:
    executor:
      name: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run: |
          go mod download
      - save_cache:
          key: ct-modcache-v2-{{ checksum "go.mod" }}
          paths:
            - /home/circleci/go/pkg/mod

  unit_integration_tests:
    executor:
      name: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run: |
          curl -sLo consul.zip https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip
          unzip consul.zip
          sudo cp consul /usr/local/bin/
      - run: |
          make test-integration
      - when:
          condition:
            or:
              - equal: [ main, <<pipeline.git.branch>> ]
              - matches: { pattern: "release/.+", value: <<pipeline.git.branch>> }
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                branch_pattern: main,release/.+

  vault_integration_tests:
    executor:
      name: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run:
          name: Install Vault
          command: |
            curl -sLo vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
            unzip vault.zip
            sudo cp vault /usr/local/bin/
            vault version
      - run: |
          go test -count=1 -timeout=80s -tags 'integration vault' ./... -run Vault

  e2e_tests:
    executor:
      name: go
    resource_class: medium+
    parameters:
      part:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run:
          name: Setup dependencies
          command: |
            curl -sLo consul.zip https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip
            unzip consul.zip
            sudo cp consul /usr/local/bin/
            
            curl -sLo gotestsum.tar.gz https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION}_linux_amd64.tar.gz
            tar -xzf gotestsum.tar.gz gotestsum
            sudo cp gotestsum /usr/local/bin/
      - run:
          name: E2E tests
          command: |
            ./build-scripts/split-tests.sh e2e ./e2e ${E2E_TESTS_PARALLELISM} ${PWD}/.build/chunks
            CHUNK_INDEX=<< matrix.part >> make test-e2e-cirecleci
      - store_test_results:
          path: .build/test-results
      - when:
          condition:
            or:
              - equal: [ main, <<pipeline.git.branch>> ]
              - matches: { pattern: "release/.+", value: <<pipeline.git.branch>> }
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                branch_pattern: main,release/.+

  consul_compatibility_tests:
    executor:
      name: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run: |
          make test-compat
      - slack/notify:
          event: fail
          template: basic_fail_1

  benchmarks:
    executor:
      name: go
    parameters:
      no_output_timeout:
        type: string
        description: the job times out after this duration with no output
        default: 30m
    steps:
      - checkout
      - run:
          name: Install Consul
          command: |
            curl -sLo consul.zip https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip
            unzip consul.zip
            sudo cp consul /usr/local/bin/
      - run:
          name: Install Terraform
          command: |
            curl -sLo terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            unzip terraform.zip
            sudo cp terraform /usr/local/bin/
      - run:
          name: Copy terraform to benchmark directory
          command: /bin/cp /usr/local/bin/terraform ./e2e/
      - run:
          name: Version Check
          command: |
            go version
            consul version
            terraform version
      - run:
          name: Run benchmark suite
          no_output_timeout: << parameters.no_output_timeout >>
          command:
            make test-benchmarks | /usr/bin/tee /tmp/benchmarks.json
      - slack/notify:
          event: fail
          template: basic_fail_1
      - run:
          name: Output benchmark results
          command: |
            mkdir /tmp/benchmark_results
            grep 'ns/op' /tmp/benchmarks.json | awk -F '"Output":"'  '{print $2}' | sort \
             > /tmp/benchmark_results/results-${CIRCLE_SHA1}-${CIRCLE_BUILD_NUM}.txt
            cat /tmp/benchmark_results/results-${CIRCLE_SHA1}-${CIRCLE_BUILD_NUM}.txt
      - store_artifacts:
          path: /tmp/benchmarks.json
          destination: benchmarks.json
      - store_artifacts:
          path: /tmp/benchmark_results
          destination: benchmark_results

  compile_weekly_tests:
    executor:
      name: go
    steps:
      - checkout
      - restore_cache:
          keys:
            - ct-modcache-v2-{{ checksum "go.mod" }}
      - run:
          name: Check that weekly tests can compile
          command:
            make compile-weekly-tests
      - when:
          condition:
            or:
              - equal: [ main, <<pipeline.git.branch>> ]
              - matches: { pattern: "release/.+", value: <<pipeline.git.branch>> }
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
                branch_pattern: main,release/.+

  go-checks:
    executor:
      name: go
    steps:
      - checkout
      - run: make go-fmt-check
      - run:
          name: verify go.mod and go.sum are correct
          command: |
            go mod tidy
            git diff --quiet && exit 0
            echo "please run 'go mod tidy' to ensure go.mod and go.sum are up to date"
            exit 1

  terraform-checks:
    executor:
      name: go
    steps:
      - checkout
      - run:
          name: Install Terraform
          command: |
            curl -sLo terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
            unzip terraform.zip
            sudo cp terraform /usr/local/bin/
      - run: make terraform-fmt-check

workflows:
  build-test:
    jobs:
      - refresh-cache
      - go-checks
      - terraform-checks
      - compile_weekly_tests:
          requires:
            - refresh-cache
      - unit_integration_tests:
          requires:
            - refresh-cache
      - e2e_tests:
          requires:
            - refresh-cache
          matrix:
            parameters:
              part: [ "0", "1", "2" ]
  weekly-benchmarks:
    jobs:
      - refresh-cache
      - benchmarks
      - vault_integration_tests:
          requires:
            - refresh-cache
      - consul_compatibility_tests:
          requires:
            - refresh-cache
    triggers:
      - schedule:
          # 02:10 UTC every Wednesday
          cron: 10 2 * * 3
          filters:
            branches:
              only:
              - main

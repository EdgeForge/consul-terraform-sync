// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	dep "github.com/hashicorp/hcat/dep"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Watcher is an autogenerated mock type for the watcher type
type Watcher struct {
	mock.Mock
}

// Add provides a mock function with given fields: d
func (_m *Watcher) Add(d dep.Dependency) bool {
	ret := _m.Called(d)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dep.Dependency) bool); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Changed provides a mock function with given fields: tmplID
func (_m *Watcher) Changed(tmplID string) bool {
	ret := _m.Called(tmplID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(tmplID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Recall provides a mock function with given fields: id
func (_m *Watcher) Recall(id string) (interface{}, bool) {
	ret := _m.Called(id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Register provides a mock function with given fields: tmplID, deps
func (_m *Watcher) Register(tmplID string, deps ...dep.Dependency) {
	_va := make([]interface{}, len(deps))
	for _i := range deps {
		_va[_i] = deps[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tmplID)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Wait provides a mock function with given fields: timeout
func (_m *Watcher) Wait(timeout time.Duration) error {
	ret := _m.Called(timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

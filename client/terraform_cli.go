package client

import (
	"context"
	"errors"
	"fmt"
	"log"
	"path/filepath"
	"strings"

	"github.com/hashicorp/consul-nia/templates/tftmpl"
	"github.com/hashicorp/terraform-exec/tfexec"
)

// workspaceEnv is the environment variable to set a Terraform workspace
const workspaceEnv = "TF_WORKSPACE"

var _ Client = (*TerraformCLI)(nil)

// TerraformCLI is the client that wraps around terraform-exec
// to execute Terraform cli commands
type TerraformCLI struct {
	tf         terraformExec
	logLevel   string
	workingDir string
	workspace  string
	execPath   string
	varFiles   []string
}

// TerraformCLIConfig configures the Terraform client
type TerraformCLIConfig struct {
	LogLevel   string
	ExecPath   string
	WorkingDir string
	Workspace  string
	VarFiles   []string
}

// NewTerraformCLI creates a terraform-exec client and configures and
// initializes a new Terraform client
func NewTerraformCLI(config *TerraformCLIConfig) (*TerraformCLI, error) {
	if config == nil {
		return nil, errors.New("TerraformCLIConfig cannot be nil - no meaningful default values")
	}

	tfPath := filepath.Join(config.ExecPath, "terraform")
	tf, err := tfexec.NewTerraform(config.WorkingDir, tfPath)
	if err != nil {
		return nil, err
	}

	client := &TerraformCLI{
		tf:         tf,
		logLevel:   config.LogLevel,
		execPath:   tfPath,
		workingDir: config.WorkingDir,
		workspace:  config.Workspace,
		varFiles:   config.VarFiles,
	}
	log.Printf("[TRACE] (client.terraformcli) created Terraform CLI client %s", client.GoString())

	return client, nil
}

// Init initializes by executing the cli command `terraform init` and
// `terraform workspace new <name>`
func (t *TerraformCLI) Init(ctx context.Context) error {
	if err := t.tf.Init(ctx); err != nil {
		return err
	}

	if err := t.tf.WorkspaceNew(ctx, t.workspace); err != nil {
		var wsErr *tfexec.ErrWorkspaceExists
		if errors.As(err, &wsErr) {
			log.Printf("[DEBUG] (client.terraformcli) workspace already exists: '%s'", t.workspace)
			return nil
		}
		return err
	}
	return nil
}

// Apply executes the cli command `terraform apply` for a given workspace
func (t *TerraformCLI) Apply(ctx context.Context) error {

	// Set the workspace in the environment
	env := make(map[string]string)
	env[workspaceEnv] = t.workspace
	t.tf.SetEnv(env)

	// Pass along all tfvars files including the one generated by Consul NIA
	numFiles := len(t.varFiles)
	opts := make([]tfexec.ApplyOption, numFiles+1)
	for i, vf := range t.varFiles {
		opts[i] = tfexec.VarFile(vf)
	}

	tfvarFile := strings.TrimRight(tftmpl.TFVarsTmplFilename, ".tmpl")
	opts[numFiles] = tfexec.VarFile(tfvarFile)

	return t.tf.Apply(ctx, opts...)
}

// Plan executes the cli command `terraform plan` for a given workspace
func (t *TerraformCLI) Plan(ctx context.Context) error {
	// Pass along all tfvars files including the one generated by Consul NIA
	numFiles := len(t.varFiles)
	opts := make([]tfexec.PlanOption, numFiles+1)
	for i, vf := range t.varFiles {
		opts[i] = tfexec.VarFile(vf)
	}

	tfvarFile := strings.TrimRight(tftmpl.TFVarsTmplFilename, ".tmpl")
	opts[numFiles] = tfexec.VarFile(tfvarFile)

	_, err := t.tf.Plan(ctx, opts...)
	return err
}

// GoString defines the printable version of this struct.
func (t *TerraformCLI) GoString() string {
	if t == nil {
		return "(*TerraformCLI)(nil)"
	}

	return fmt.Sprintf("&TerraformCLI{"+
		"LogLevel:%s, "+
		"ExecPath:%s, "+
		"WorkingDir:%s, "+
		"WorkSpace:%s, "+
		"VarFiles:%s"+
		"}",
		t.logLevel,
		t.execPath,
		t.workingDir,
		t.workspace,
		t.varFiles,
	)
}

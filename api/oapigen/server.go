// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

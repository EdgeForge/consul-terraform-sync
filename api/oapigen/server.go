// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun_tasks)
	CreateDryRunTask(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDryRunTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDryRunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDryRunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun_tasks", wrapper.CreateDryRunTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GQAA///nqKWLmR0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

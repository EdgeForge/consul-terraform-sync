// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//2Z53me/IgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun_tasks)
	CreateDryRunTask(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDryRunTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDryRunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDryRunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun_tasks", wrapper.CreateDryRunTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

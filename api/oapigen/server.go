// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun/task)
	ExecuteTaskDryrun(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ExecuteTaskDryrun operation middleware
func (siw *ServerInterfaceWrapper) ExecuteTaskDryrun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteTaskDryrun(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun/task", wrapper.ExecuteTaskDryrun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYW28buxH+KyzTh5xU0urqi4A8JLaBGs3JMWK3L5ZgcMlZice75IbkWhYM9bcXQ64u",
	"K60sOU2L9siAoV3OcD4OPw6/0QvlOsu1AuUsHb5Qy6eQMf/1c5EkYG7ASC3wOTc6B+Mk+FFQLE7BD8Az",
	"y/IU6NCZAhrUzXOgQxprnQJTdNGgGXuu2NGBpSs764xUE28mVdWs266xW6ze6Ph34A49L5hjqZ7cgnmS",
	"HOyFVkI6qdUubMEc46AcmGoowTt1kBTLwOaMw5Y1JKxIXa2HFvCQgWPowUTAwdKbCoodr9XUL/QR5nRI",
	"n1haAK1bq4EJPOdVPDOIWx/q0FhdGA4PUvG0EGAfnphf9xL/MGGphY3w5fP2FtbmfH+SediOB1vuB777",
	"s4GEDum7aM23qCRbtHf7Fg3KtbJF+vD4dHASb/i3f1S8cVAUIbGvOd+WdlXnI+HX4N6TsC2A/3125sxN",
	"q8bZvImMq7E1wAtj4Uf48jOJZ+B7IQ1WmvsAf/xKbm992GuVF+6Pm91jk3Jp5qZQ3+B7AdYdIvEds49L",
	"0w1fm2tl4Tjn0nbRoFfGaLO7ARlYyyZb+XRTaYm0hCkC6EaWVnWVf3PdS7u6pXsAm+i3Lq8lvtcWFRZR",
	"BgXrHqQ45FIm8PpyB2yIWJlrvGjQtUMlJ3F80uPitN08S/qDZj/pd5tx9zRuxrzLTpL+ea8DJ7RBE20y",
	"5uiQFoUUdST7VtRV5ylTE7APuQELyh11g+cp27qbM431suXAuqZj9rGVas7Sh0Sm0JoYACfV+gIYkm+Q",
	"GLBTqSbEOuag1WqReyk+dsWg3T+P+6eicyLOeV90BpwPzs8H7USInoBuPz49P+2cjEfqmIj7A52c9/pd",
	"PuC9cxgwGCTt9ukpA857Xd5OzjpnnU4Sn3XOe+ORGqk7MIZhdklhQRA3BWIhBe5AkNzoJynAWOI0mYAC",
	"wxx4k0SnqZ5hZHgGXmCJHynMXIt8g1AQCeP42hJmgEglJGc450y66dYUdp7FOrXDkWpGfyECrDN6Tpjy",
	"aBThBjCsgTxlHDJQrop7JtOU5GD8Q3XmEsIQHQh5R960kyQrrCPxKrII+MxyfSO69h5RMqI7M4woecHA",
	"+Pkn4Vo5UI5UPh/JqGi3ezz8b179dkfekUQbjF9Z8dqlSf4KaaobhOXyT5sDZDkwg/iYgavf7tbopCC7",
	"n49kRI+l7YiSpl8FkPePSs8UYYkDQ1iep/Nf1lHfkfc9UqhwNAVhzhkZFw4smUohQJWmC9yzm5SpIekg",
	"/ZgQDdLGb8GzEV6XbGmNVK0mdMwVtnqabcE5WJsU6XGCe1cv7ZYZo7dKxgcS/n7V6mBx9951lf0Ijf8G",
	"hbx4JcKrWuLfjfHa3G+WvJuz/YBurbjXocXrvbJUj3Gd/lLvNzcDLxNEWx/8pAIsNzIPLpQ21g1kuHNQ",
	"baEaYPbxgjboqsrS4f14c0n3mGbaoCyXyI9QdhCtmUQlvihUNNqgT8xIjOLLUTnVExgbQHRa7Vbb326V",
	"9Me+733IV43vazmsNMmhXVnn5cDerTuNSnI2KYWiKDwQzEzdcd5oxFdCMqT04K0ecl4RY8w+fqqVtuv9",
	"2LDHfEoHWX1TW75gxrD5Ni9XXuu5qht7eLZy5zfh15Jgf1Ncnr5Xz0j1aC0JZd/U3e8cqBUHN8EHOtbg",
	"nWnziDeokNUeitq54v7KtnRjt2krWg9E+L/pN/pQyS2NyryO99SBN7QTa5d9OvyHlHWDmuLg8ULli5kv",
	"K9dhqFvJ2NTpO5lAY6kSXRZCx7jPR1nCWC6bTutUqkmTawM7B5x+urkml5oXKGIYvkNxQ0I1b640XPN2",
	"rnjDD2Xay8Wg99HeApD74EC+Xn8in26ux++nzuV2GEWz2awV7pCW1JHQ3EZKsojl8hfaoKnkUG5GCfjX",
	"my/NbqtNvpQjDVqYlA7pcr6JdNMibnGdRVNmp5Jrk0chQNOt0CLnojjVcZQxqaIv1xdXX2+v/CZI53l5",
	"cXeLQGltDdY5KDz6Q9orzwH2tZ4l0VMnEr4fjZb7metAwWpe74ycTFCZMxLsffLYUrILX0O9KEIS+kxe",
	"CzqkV16uAxIh9L3rRu2zFvPlNpfNEmo31O1Sq+h3G05x4NIhplUb8sXutYgIUMAh9M01jJaIAj2xnnu+",
	"hnPlk9Rtt386zmVDvweo2ej4V0XpJ0GoNvA1CP6u4DkPHVnordHEFlnGzPxYKmBJZBMvKoIRHeMsyLdQ",
	"Vfcy7cK3Xzi7gtk+WgWjuxAoZ4Zl4IKi2Z7uUqKKwD4o0wKsx2oKpaSatMhtkefaOOtZofSMzKaST/HJ",
	"+s4OoxOZZSAkc5DOPRKJ034vwMzpSlsFYq/zD6rIfOHXs5obdzH+zxyCyg9N+49AaHCPoH3nJyP7Pyb9",
	"Lis3GB4YXSV49ILUWAR+p+Bgl+mX/j3OaaWalDqUxMyCIFp5AuIcq4O1cwrCBJi7z/OvQWK8ehbQhugk",
	"xPHNrAdWUtr/2LlidClZqhSpUPyQsg0srxCqX3OxIJYARPwvbvx6k8LuzMlS8W1vfinD61N/N4V6FUJu",
	"vc9KGbzkRjvNdboYRtHLVFu3GL5gkVrQLY08XZXPpWj1vw/519hWaLM1fDYYnJUNh49QHUVJ4nvHULnK",
	"Ry9U/OrGi38FAAD//5DYq0DRHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CB0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

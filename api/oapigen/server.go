// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

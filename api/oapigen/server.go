// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun_tasks)
	CreateDryRunTask(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDryRunTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDryRunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDryRunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun_tasks", wrapper.CreateDryRunTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYbW/juBH+Kyy3H+6utuTXvBi4D7tJigu6uxckufuyDgKKHNncSKSWpOI1Ave3F0PK",
	"L7KV2LnmirZZwFhJM8OHw4fDZ/hEuc4LrUA5S0dP1PIp5Mz/90OZpmCuwEgt8LkwugDjJPivoFiSgf8A",
	"31leZEBHzpTQom5eAB3RROsMmKKLFs3Z95odHVq6srPOSDXxZlLVzXqdBrvF6o1OvgJ36HnGHMv05AbM",
	"o+Rgz7QS0kmtdmEL5hgH5cDUhxK82wRJsRxswThsWUPKysw1emgB9zk4hh5MBBwsu6qh2PFahX6iDzCn",
	"I/rIshJo01wNTOB7UcczgyT6qQmN1aXhcC8Vz0oB9v6R+Xkv8Y9SllnYGL563l7Cxpw/n2QeluPeVuuB",
	"7/5qIKUj+i5e8y2uyBY/u3yLFuVa2TK7f3jcG8Qb/uP3mjd+FGVI7EvON5Vd3flA+A24n0nYFsD/PDsL",
	"5qZ143zeRsY12BrgpbHwR/jylsQz8K2UBivNlwD/7oXc3vhhL1VRuv/f7B6alHMzvy7VLbMP1/CtBOv2",
	"EXnTdMvfFlpZOCxAZbto0QtjtNldiBysZZOtvLqptERawhQBdCNLq6YTYHP+S7umFHgAm+i3DrElvpcm",
	"FSZRDQrW3Uuxz6VK4uX5DtgwYi3W3aJF1w61nCTJUZ+L4077JB0M24N00GsnveOknfAeO0oHp/0uHNEW",
	"TbXJmaMjWpZSNJHtumwoNkXGts7bXGMNjBxY13bMPkSZ5iy7T2UG0cQAOKnWRX1EriE1YKdSTYh1zEEU",
	"ReSLFD/3xLAzOE0Gx6J7JE75QHSHnA9PT4edVIi+gN4gOT497h7djdUhIz4/0NFpf9DjQ94/hSGDYdrp",
	"HB8z4Lzf4530pHvS7abJSfe0fzdWY3ULxjDMFCktCOKmQCxkwB0IUhj9KAUYS5wmE1BgmANvkuos0zMc",
	"Gb4DL7FsjxVmLiLXEIocYRxfW8IMEKmE5AxjzqSbboWw8zzRmR2NVTv+GxFgndFzwpRHowg3gMMaKDLG",
	"IQfl6rhnMstIAcY/1CNXEEboQMg78qqVJHlpHUlWI4uAzyznN6Zr7zElY7oTYUzJEw6Mf/8kXCsHypHa",
	"389kXHY6fR5+2xe/3pJ3JNUGx6/NeO3SJr9AlukWYYX8y+YHsvwwg+SQDxe/3q7RSUF2/34mY3oobceU",
	"tP0sgPzwoPRMEZY6MIQVRTb/cT3qO/JDn5SKT5magCDMOSOT0oElUykEqMp0gWt2lTE1Il2kHxOiRTr4",
	"v+DZCq8rtkRj1bTBXcrvTanuS5OFE8VyI4sgMugFHnmFkRaIVtk8Ir9dfyQ6JWtmnWW6FMSUirgpc4Rr",
	"Y3zNFH5DINWQRGgQ0Y3ziU6dK+wojllRRG4ZLZIaX8T5vK3NJJ5p8+CPUYtvZjY2pfI/bZbwc/j75Bf5",
	"9aHb6w+Gh2n9Xam2qz+N3qpsP5Hw75NWe88T7910mBzQXrxCnC9eGOFFGfPvjvFS7Fer7c1of0Ay19yb",
	"0KKiqE3VY1ynv2o12psDLxNEo5980PpuQAIve9fQsKLQQwHC7MMZbdHVYUBHX+42p/QF00xblBUS+RGq",
	"I6I1k7jCF4fCS1v0kRmJo/iqWYV6BGMDiG7UiTpeMtbSn/iW+75Y9dwv5bDWn4dOaZ2XPWu3bnJqydmk",
	"FOqw8OA3f1PV2bgDWGnYkNK9VwIh5zX9x+zD+0ZVvV6PDXvMp3SQN/fT1QtmDJtv83LltY5VX9j90aqV",
	"34TfSILn+/Fq9724R+pba0movXvr98rwEyu835J0m2gD/xoAYrXGk13Ier9G7VxxLyVs7QSI4vWHGH/b",
	"fmX31djKqErk3TMb/xwycPC8fH8LQb4pxJ+B8Yruae3ypphb1JR7tzWKfCRrVTH3Q31dJjZp9Zqrra1A",
	"OKpUqa4quWPcJ7aqwayQbad1JtWkzbWBnQpF319dknPNSxSLDN+hiCThOGqvFE37Zq54y3/KtZfloUdC",
	"ewtAvgQH8vnyPXl/dXn3w1LJzGazKByCKGOE5jZWksWskD/SFs0kh2pVK8Cfrj62e1GHfKy+tKiXYCtl",
	"NJFuWiYR13k8ZXYquTZFHAZorxRTG/dQnGQ6iXMmVfzx8uzi882Fz550fp+d3d4gUNp4iOgCFNauEe1X",
	"+7pgbuqXI37sxsLMURuGzYuE1IHM9cTeGjmZYAvESHDw2WPL3kj4U8CrT1xun8pLgch817K+K1g3tx+0",
	"mC+XGZQfEjUy9kdSq/irDVUpkHIfZXcvMxa7Zzt+RsWK6Den4WGvuY6Hkid/2KQ+Kb1O50/BurwMeQas",
	"2bgtWRXbN4JRv/xoQPCbgu9F6IDDvQSa2DLPmZkfyggs9Wzi1VEwoncYBXm3h3CBOBhdwexldlW8Kphh",
	"ObggzbbDnUuUQ9h35lqA9VhNqZRUk4jclEWhjbOeGUrPyGwq+RSf7Lq9kXkOQjIH2dwjkRj2WwlmTlci",
	"ESfY2sg/qDL3B5qeNUiHxd2fsxkO3AbhQuEA6nffGNn/MOl3WbnB8MDoOsHjJ6TGIvAb9cou04OOwZhW",
	"qkklqEnCLAiilScgxlhtrJ1dEAJg7j7MPwfp9OJeQBvs8F1FhApYRWl/YbxidCXF6hSpUXyfRA8srxFq",
	"8KaE2tKBz9EqzFL8N7JqzYCw9HOylMnbzKqaleZ1vZ1Cs9QhN95nJT+eCqOd5jpbjOL4aaqtW4yesAIu",
	"6FYnMV3V5qXS95d9/jU2X9psfT4ZDk+qtsyPUP+Kusd32KEsVo9eDfnZ3S3+FQAA///MDg7Gch4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TnLm0B8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

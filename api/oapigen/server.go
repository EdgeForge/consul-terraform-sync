// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets health status
	// (GET /v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

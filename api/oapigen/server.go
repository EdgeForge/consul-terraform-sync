// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+mcAAAD//3oc1i5EHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

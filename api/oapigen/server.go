// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dwAAAP//eI/FEaAdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

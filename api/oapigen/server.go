// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun/task)
	ExecuteTaskDryrun(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ExecuteTaskDryrun operation middleware
func (siw *ServerInterfaceWrapper) ExecuteTaskDryrun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteTaskDryrun(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun/task", wrapper.ExecuteTaskDryrun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JRwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

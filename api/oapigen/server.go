// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets health status
	// (GET /v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"naGfNgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

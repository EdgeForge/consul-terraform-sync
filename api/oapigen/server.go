// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uBwIHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

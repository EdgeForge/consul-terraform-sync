// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rlxw2t2s/x0AAP//ChJ0nc0tAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

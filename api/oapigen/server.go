// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun_tasks)
	CreateDryRunTask(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDryRunTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDryRunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDryRunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun_tasks", wrapper.CreateDryRunTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

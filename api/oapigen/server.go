// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

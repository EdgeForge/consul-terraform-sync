// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

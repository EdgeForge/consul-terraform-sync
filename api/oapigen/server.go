// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+2OfXsMB0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

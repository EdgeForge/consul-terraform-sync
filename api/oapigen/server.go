// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bLrxzifY8OiKqTvdbP3vAAAA//8KNqE04B0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

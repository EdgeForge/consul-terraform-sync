// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZ+2/bOPL/V/hlvz90e7bkZx4G+kOb5rDBtd0gye79UBsGRY4sNhKpJam4RuD72w98",
	"+CFbjpNu73ZxLpBa4gxnOPOZF/2IqSxKKUAYjUePWNMMCuK+vq/SFNQ1KC6ZfS6VLEEZDm4VBElycAvw",
	"jRRlDnhkVAUtbBYl4BFOpMyBCLxs4YJ8q9HhocZrOm0UFzNHxkWdrNdpoFuu38jkK1BjOS+IIbmc3YJ6",
	"4BT0hRSMGy7FvtqMGEJBGFB1UYx2m1QSpABdEgo71JCSKjeNHJLBtABDLAdhXg+SX9e02ONab/2I72GB",
	"R/iB5BXgprMqmMG3sq7PHJLoTZM2lYYp0dNCsiqHKRdlZZwVgv7BY+uNUpLrBg86qb9XXFl/f1lpMGly",
	"xGHLU++jqQ5Osu/+X0GKR/hVvAFhHBAYH/TpsoWpFLrKp/cPRzdxhP/4rcZtF609jjHfBro68zPVb9B7",
	"2WywHQX/+5AticnqxMWibWHYQKuAVkpDDUQBNcdQ9B9Co9N+8oRpPzlxVytp/5vGfa5RLpWSat8MBWhN",
	"ZjunMhnXiGtEBALLhlZUTTl5W/qK7qACN6BLKfxJd8rKSr+nYssfIggFbaacHWO58ZRXH/aU9RJre02W",
	"Lfwkal6cf7Z3+44kUmNvSiOb49U8mCQnfcpOO+2zdDBsD9JBr530TpN2QnvkJB2c97twgls4laogBo9w",
	"VXHWBMybqimhZ0TMQE9LBRpEiGRNFS99HsP/zMBkoJBUSEiDuEgV0UZV1FQKUGBHc1CAGBigBhhilZWJ",
	"DNH3iAtdArWbRbgpnZQ52WkYfGaJDGjTtltEuaQkn6Y8h2imAAwXmwI0QjeQKtCZFagNMRBFEfrC2dse",
	"G3YG58nglHVP2DkdsO6Q0uH5+bCTMtZn0Bskp+en3ZPJWDxH4mFBJ+f9QY8Oaf8chgSGaadzekqA0n6P",
	"dtKz7lm3myZn3fP+ZCzG4g6UItZVqNLAkMkAaci92UolHzgDpZGRaAYCFDHgSFKZ53JuJcM3oJW15lhY",
	"y0XoBrSsFAVEnJE1IgoQF4xTYvecc5PtbKEXRSJzPRqLdvw3xEAbJReICKeNQFSBFaugzAmFAoSp6z3n",
	"eY5KUO6hvnNQYWQZEHqFXuRJVFTaoGQtmXn91Op8Y7zhHmM0xns7jDF6tILt51+ISmFAGFT7vEXjqtPp",
	"U/+3ffnLHXqFUqms/NqJNyxt9DPkuWwhUvL/215Aq4U5JM9ZuPzlbqMdZ2j/8xaN8XNhO8ao7U4B6PW9",
	"kHOBSGpAIVKW+eKnjdRX6HUfVcIHKkPEGMWTyoBGGWcMRCBdWp9d50SMUNfCjzDWQh37zXO2/OuAlmgs",
	"mjKMSelUVWJaqXw/kVza+lwqrgFJkS8i9OvNRyRTtEHWRS4rhlQlkMmIQVQq5UoMcwFhoeYyiqpcKtkk",
	"jMyYUo/imJRlZFa7RVzaF3GxaEs1i+dS3buar+2buY5VJdyfNknoB/j77Gf+9b7b6w+GzxtW9tvK/dSq",
	"5E5me4P8v09SHC2/jrup9j5jPqJGTysNasog5QLYy0eZPakvbLFSnu+RjsdjbFOB/R9xgcJBojsy0wfb",
	"tNoWX+yMhFuYlNyahhsonlSfKEUW39fx/TkD2kFnP9nI/EBDveDYTereEX1fY3Zd1gamYXxsb7dOK5E4",
	"euM2rWcNG+irSwpvRm9lK1bN4iAoDi+9p23XS/T9BW7hdUnFoy+T7ZZtx0IPRHErxVWXQPwASnslulEn",
	"6rhmpWb3xN2tTMv15cpTXWDtIsZPvxu7HOk+N4NrzTjbTrLtvX9wSbIJpVuXPYeQefDuR65G7Y3ERvPv",
	"XwftxMRTJ93pr70ra7MM0ffvGuezjZu3o+BF0N/G5B8PpBWgjk4HvwXCT6R0fCvQbZ/b4+9YxXD2Wvtq",
	"ciA8P0AOBv5Ks9v2zHZA6cC8r60JCecpyS4p7Qp1jIfF/YnWaWFVHU0KdpazqPve4x+x+TYo/0DbYKVy",
	"kcpQBwyhZlWvbKyUvG2kzLmYtalUsJff8LvrK/RB0sq25MS+s6068uN4e903tm8XgrbcUiHd8ONHYUuv",
	"AdAXz4A+X71D766vJq9X/eJ8Po/8JYBtFpmkOhacxKTkP+EWzjmFgIGg8Kfrj+1e1EEfw0oLu0Z33X/O",
	"uMmqJKKyiDOiM06lKmMvoL3uS9t6IWic5DKJC8JF/PHq4vLz7aWzHjcu3C/ubq2iuLEEyRKEzUYj3A9Z",
	"oSQmc+6IH7qxRYR7KKVumOYv3HCnEUEC5q5SuE7eOtUZ7Iqtie58GSmJIgUYX0J3t/vAbVGzU1YhGWjn",
	"A1UJwcUsQrdVWUpltOvohZyjecZpZp/0ppnnRQGMEwP5YizsDGqJw51BYKBrnZla+PHAcroZgesVsZ1t",
	"BEOMa0oUs9MjMU4MCGbHDPt16y7CHZvbM/xegVpsOgcbfK3wC4r/iaQqXHaVc8fhdtgKmnUynqzj/b1k",
	"ixXkw52KncrsRM6liL9qn983Mo6F7yr9Lff7oztnChmMhLej3BZzF/Y+mTlU9DrdH6xZyJSHVFNrgtam",
	"6/hBCtRvIRs0+FXAt4ANn7gtia6KgqhFYzDYGmunkVAgNJ5YjnVcxY8WJEsfVraM7geYL692T83FLHRj",
	"KCEaGJLCodDusbrrYXvB5zewtnu/+Owr+pMhaGkcvgMQgmIB3O4KeY3t0CHUIVID+7FWy6O8BqjOM/y5",
	"NQ9s18TnXW0uWy8A5E57cwiW3krsr4jKDYI8dBYouG0PmaFpbcbFXQbNldLN3aDW1euxVNJIKvPlKI4f",
	"M6nNcvRoE/cS77Sx2bqkBIv5Gzn32jbhUu0snw2HZ6E9dxLqq7ZsuvHOJ9jw6IqpO91k+e8AAAD//3p8",
	"rIHYHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0O1uuv5XAAAA//92hmCEhxwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

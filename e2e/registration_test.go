//go:build e2e
// +build e2e

package e2e

import (
	"fmt"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"github.com/hashicorp/consul-terraform-sync/api"
	"github.com/hashicorp/consul-terraform-sync/config"
	"github.com/hashicorp/consul-terraform-sync/testutils"
	"github.com/hashicorp/consul/sdk/testutil"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestE2E_ServiceRegistration_Defaults(t *testing.T) {
	setParallelism(t)
	srv := testutils.NewTestConsulServer(t, testutils.TestConsulServerConfig{
		HTTPSRelPath: "../testutils",
	})
	defer srv.Stop()
	tempDir := fmt.Sprintf("%s%s", tempDirPrefix, "registration")
	taskName := "registration_w_consul"
	module := "mkam/hello/cts"

	cts := ctsSetup(t, srv, tempDir, moduleTaskConfig(taskName, module))

	// Find CTS service by name since ID is autogenerated
	name := config.DefaultServiceName
	ctsServices, err := waitForServiceByName(t, srv, name)
	require.NoError(t, err)
	require.Equal(t, 1, len(ctsServices), "unexpected number of CTS services in Consul")
	var service testutils.Service
	for _, s := range ctsServices {
		service = s
	}

	// Verify service attributes
	id := service.ID
	assert.True(t, strings.HasPrefix(id, "cts-"),
		"unexpected format for generated service ID %s", service.ID)
	assert.Equal(t, name, service.Service)
	assert.Equal(t, cts.Port(), service.Port)
	assert.Equal(t, []string{"cts"}, service.Tags)

	// Verify health check for service
	checkID := id + "-health"
	check, err := testutils.WaitForCheckStatus(t, srv, checkID, "passing", defaultWaitForCheckUpdate)
	require.NoError(t, err)
	assert.Equal(t, "http", check.Type)
	assert.Equal(t, "CTS Health Status", check.Name)
	assert.Equal(t, "passing", check.Status)
	assert.Equal(t, "Check created by Consul-Terraform-Sync", check.Notes)
	assert.Equal(t, service.ID, check.ServiceID)
	assert.Equal(t, name, check.ServiceName)
	assert.Equal(t, service.Tags, []string{"cts"})
	url := fmt.Sprintf("http://localhost:%d/v1/health", cts.Port())
	assert.Contains(t, check.Output, url)
}

func TestE2E_ServiceRegistration_Configured(t *testing.T) {
	setParallelism(t)

	srv := newTestConsulServer(t)
	defer srv.Stop()

	tempDir := fmt.Sprintf("%s%s", tempDirPrefix, "configured_registration")
	cleanup := testutils.MakeTempDir(t, tempDir)
	defer cleanup()

	id := "cts-01"
	serviceName := "cts"
	port := testutils.FreePort(t)
	address := fmt.Sprintf("http://127.0.0.1:%d", port)
	rConfig := fmt.Sprintf(`
service_registration {
	enabled = true
	service_name = "%s"
	default_check {
		enabled = true
		address = "%s"
	}
}`, serviceName, address)

	configPath := filepath.Join(tempDir, configFile)
	config := baseConfig(tempDir).appendID(id).appendPort(port).
		appendConsulBlock(srv, rConfig).appendTerraformBlock().appendDBTask()
	config.write(t, configPath)

	cmd := exec.Command("consul-terraform-sync", fmt.Sprintf("--config-file=%s", configPath))
	err := cmd.Start()
	require.NoError(t, err)
	cts, err := api.NewClient(&api.ClientConfig{URL: address}, nil)
	require.NoError(t, err)
	err = cts.WaitForTestReadiness(defaultWaitForTestReadiness)
	require.NoError(t, err)

	testutils.WaitForConsulServiceRegistered(t, srv, id, defaultWaitForRegistration)
	service, err := testutils.GetService(t, srv, id)
	require.NoError(t, err, "service not registered")
	expectedSrv := testutils.Service{
		Service: serviceName,
		ID:      id,
		Port:    port,
		Tags:    []string{"cts"},
	}
	assert.Equal(t, expectedSrv, service)

	checkID := id + "-health"
	check, err := testutils.WaitForCheckStatus(t, srv, checkID, "passing", defaultWaitForCheckUpdate)
	require.NoError(t, err)
	assert.Equal(t, id, check.ServiceID)
	assert.Equal(t, serviceName, check.ServiceName)
	url := fmt.Sprintf("%s/v1/health", address)
	assert.Contains(t, check.Output, url)
}

func TestE2E_ServiceRegistration_DeregisterWhenStopped(t *testing.T) {
	setParallelism(t)
	srv := newTestConsulServer(t)
	defer srv.Stop()

	tempDir := fmt.Sprintf("%s%s", tempDirPrefix, "cts_stop_deregister")
	cleanup := testutils.MakeTempDir(t, tempDir)
	defer cleanup()

	id := "cts-01"
	configPath := filepath.Join(tempDir, configFile)
	config := baseConfig(tempDir).appendID(id).
		appendConsulBlock(srv).appendTerraformBlock().
		appendModuleTask("disabled_task", "mkam/hello/cts", "enabled = false")
	config.write(t, configPath)

	// Start CTS, verify that service is registered
	cts, stop := api.StartCTS(t, configPath)
	err := cts.WaitForTestReadiness(defaultWaitForTestReadiness)
	require.NoError(t, err)
	testutils.WaitForConsulServiceRegistered(t, srv, id, defaultWaitForRegistration)
	registered := testutils.ServiceRegistered(t, srv, id)
	assert.True(t, registered)

	// Stop CTS, check that service is deregistered
	stop(t)
	testutils.WaitForConsulServiceDeregistered(t, srv, id, defaultWaitForRegistration)
	registered = testutils.ServiceRegistered(t, srv, id)
	assert.False(t, registered)
}

// TestE2E_ServiceRegistration_RegistrationFailure tests that if CTS is unable
// to register itself as a service, it will not exit.
func TestE2E_ServiceRegistration_RegistrationFailure(t *testing.T) {
	setParallelism(t)
	srv := newTestConsulServer(t)
	defer srv.Stop()

	tempDir := fmt.Sprintf("%s%s", tempDirPrefix, "registration_failure")
	cleanup := testutils.MakeTempDir(t, tempDir)
	defer cleanup()

	// Set namespace when using an OSS Consul to force error
	rConfig := `
service_registration {
	namespace = "invalid"
}`
	id := "cts-01"
	configPath := filepath.Join(tempDir, configFile)
	config := baseConfig(tempDir).appendID(id).
		appendConsulBlock(srv, rConfig).appendTerraformBlock().appendDBTask()
	config.write(t, configPath)

	cts, stop := api.StartCTS(t, configPath)
	defer stop(t)
	err := cts.WaitForTestReadiness(defaultWaitForTestReadiness)
	require.NoError(t, err)

	// Should not be registered after CTS starts
	time.Sleep(1 * time.Second)
	registered := testutils.ServiceRegistered(t, srv, id)
	assert.False(t, registered)

	// Trigger a task, expect CTS to continue
	now := time.Now()
	apiInstance := testutil.TestService{ID: "api_new", Name: "api"}
	testutils.RegisterConsulService(t, srv, apiInstance, defaultWaitForRegistration)
	api.WaitForEvent(t, cts, dbTaskName, now, defaultWaitForEvent)
	resourcesPath := filepath.Join(tempDir, dbTaskName, resourcesDir)
	testutils.CheckFile(t, true, resourcesPath, "api_new.txt")

	// Verify still not registered now that even more time has passed
	registered = testutils.ServiceRegistered(t, srv, id)
	assert.False(t, registered)
}

func getServiceInstancesByName(t testing.TB, srv *testutil.TestServer, serviceName string) map[string]testutils.Service {
	filter := fmt.Sprintf(`Service == "%s"`, serviceName)
	return testutils.ListServices(t, srv, filter)
}

func waitForServiceByName(t testing.TB, srv *testutil.TestServer, serviceName string) (map[string]testutils.Service, error) {
	var instances map[string]testutils.Service
	polling := make(chan struct{})
	stopPolling := make(chan struct{})
	go func() {
		for {
			select {
			case <-stopPolling:
				return
			default:
				s := getServiceInstancesByName(t, srv, serviceName)
				if len(s) > 0 {
					instances = s
					polling <- struct{}{}
					return
				}
			}
		}
	}()

	select {
	case <-polling:
		return instances, nil
	case <-time.After(defaultWaitForRegistration):
		close(stopPolling)
		return instances, fmt.Errorf("timed out waiting for service %s to be registered", serviceName)
	}
}
